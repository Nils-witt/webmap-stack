upstream tilebackend {
    server tilesserver:8080;
}

server {
    listen       80;
    server_name  localhost;


    index index.html index.htm index.nginx-debian.html;
    root /www;

    location / {
        proxy_pass http://webclient:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /overlays {

        access_by_lua_block {

            local jwt_secret_key = "your_key"
            local auth_header_prefix = "Bearer "

            local function split(str, delimiter)
                local result = {}
                local pattern = "([^" .. delimiter .. "]+)"
                for match in str:gmatch(pattern) do
                    table.insert(result, match)
                end
                return result
            end


            local jwt = require "resty.jwt"
            local jwt_token = ngx.var.http_Authorization

            if not jwt_token then
                jwt_token = ngx.var.arg_accesstoken
            else
                if not jwt_token:find(auth_header_prefix, 1, true) then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.log(ngx.ERR,"Invalid token")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                jwt_token = jwt_token:sub(auth_header_prefix:len() + 1)
            end
            if not jwt_token then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.log(ngx.ERR,"Missing token")
                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            ngx.log(ngx.ERR, "JWT token: " .. jwt_token)

            
            local jwt_obj = jwt:verify(jwt_secret_key, jwt_token)

            if not jwt_obj.verified then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.log(ngx.ERR,"Invalid token")
                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            local can_view_all = false
            
            if jwt_obj.payload.view_all == true then
                can_view_all = true
                ngx.log(ngx.ERR, "User can view all overlays")
            else
                if not jwt_obj.payload.overlays then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.log(ngx.ERR,"No overlays permission")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local parts = split(ngx.var.uri, "/")
                local requested_overlay = parts[2]
                ngx.log(ngx.ERR,"Requested overlay: " .. requested_overlay)
                overlays = jwt_obj.payload.overlays
                local allowed = false
                for overlayCount = 1, #overlays do
                    if overlays[overlayCount] == requested_overlay then
                        allowed = true
                        break
                    end
                end

                if allowed == false then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.log(ngx.ERR,"You are not allowed to access this overlay.")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                
            end 

            
        }
        autoindex on;
        alias   /www/overlays/;
        try_files $uri $uri/ =404;
    }

    location /vector/ {
        proxy_pass http://tilesserver:8080/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /api {
        proxy_pass http://django:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location /admin {
        proxy_pass http://django:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location /static {
        alias /usr/share/nginx/html/static;
        try_files $uri $uri/ =404;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {

        root   /usr/local/openresty/nginx/html;
    }

}
